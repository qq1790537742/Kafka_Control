# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import Cmd_test
import sys
from PyQt5.QtWidgets import QMainWindow, QApplication,QHBoxLayout,QPushButton,QWidget
from PyQt5.QtGui import QFont
from loguru import logger
from event.EventManager import EventManager
from Connect import contest
import threading



class Ui_MainWindow(object):
    def __init__(self):
        self.str = None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(966, 729)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(410, 50, 311, 31))
        # kafka服务器ip显示
        self.lineEdit.setText(Cmd_test.extract_ip())
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(270, 40, 141, 51))
        self.label.setObjectName("label")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(10, 100, 951, 21))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(860, 630, 101, 41))
        self.pushButton.setObjectName("pushButton")
        # 绑定触发事件
        self.pushButton.clicked.connect(lambda: self.quit_button())

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(60, 630, 101, 41))
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_2.clicked.connect(lambda: self.start_button())

        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(240, 180, 571, 361))
        font = QFont("Arial",16)
        self.plainTextEdit.setFont(font)
        self.plainTextEdit.setPlainText("")
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(450, 120, 141, 51))
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt;\">kafka服务端ip</span></p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "退出"))
        self.pushButton_2.setText(_translate("MainWindow", "启动"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt;\">模块连接状态</span></p></body></html>"))


    def quit_button(self):
        stop_kafka = threading.Thread(target=Cmd_test.kafka_stop)
        stop_kafka.start()
        app = QApplication.instance()
        # 退出应用程序
        app.quit()


    def start_button(self):
        self.Start_All()




    def Start_All(self):
        start_control = threading.Thread(target=self.Start_Control)
        start_control.start()


    def Start_Control(self):
        con = contest()
        self.Algeventhandler(con.event_manager, con.conManagement)
        con.run()




    def Algeventhandler(self, event_mng, conmanager):
        self.exchange_message_management = conmanager
        event_mng.AddEventListener('CTOK', self.do_CTOK)  # 向事件处理器中添加event和对应的处理函数
        event_mng.AddEventListener('CTNO', self.do_CTNO)
        event_mng.Start()

    def do_CTOK(self, event):
        msg = event.message
        if msg:
            ip_module = msg['result']
            module_id = int(ip_module[-1])
            ip = ip_module[:-1]
            str1 = ip + "连接成功" + "\n"
            str2 = self.plainTextEdit.toPlainText()
            if str2:
                self.plainTextEdit.appendPlainText(str1)
            else:
                self.plainTextEdit.setPlainText(str1)
            message = 'STOK' + str(ip) + str(module_id)
            self.exchange_message_management.send_exchange_message(message)
        else:
            logger.debug("未连接成功")


    def do_CTNO(self, event):
        msg = event.message
        if msg:
            ip_module = msg['result']
            module_id = int(ip_module[-1])
            ip = ip_module[:-1]
            str1 = ip + "成功下线" + "\n"
            str2 = self.plainTextEdit.toPlainText()
            if str2:
                self.plainTextEdit.appendPlainText(str1)
            else:
                logger.debug('请先启动对应子模块')
















